from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload  # üÜï –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
from database.models import Order, OrderItem, User, Product, CartItem
from database.repository import UserRepository, CartRepository
from utils.states import OrderStates
from bot.keyboards.cart import (
    get_checkout_confirm_keyboard,
    get_delivery_method_keyboard,
    get_payment_method_keyboard,
    get_dates_keyboard,
    get_back_to_checkout_keyboard
)
from bot.keyboards.main_menu import get_main_menu
import config

router = Router()

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏"""
    await callback.message.edit_text(
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:\n\n"
        "üè¢ 3-–µ –æ–±—â–µ–∂–∏—Ç–∏–µ –í–ì–¢–£\n"
        "üè† —É–ª.–¢–µ—Ä–µ—à–∫–æ–≤–æ–π 16–∫1",
        reply_markup=get_delivery_method_keyboard()
    )
    await state.set_state(OrderStates.checkout_delivery_method)

@router.callback_query(F.data.startswith("pickup_"))
async def process_delivery_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏"""
    if "vgtu" in callback.data:
        delivery_address = "3-–µ –æ–±—â–µ–∂–∏—Ç–∏–µ –í–ì–¢–£"
    else:
        delivery_address = "—É–ª.–¢–µ—Ä–µ—à–∫–æ–≤–æ–π 16–∫1"
    
    await state.update_data(
        delivery_method="pickup",
        delivery_address=delivery_address,
        customer_name="–ö–ª–∏–µ–Ω—Ç"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è
    )
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–¥–Ω–∏–µ –¥–Ω–∏):",
        reply_markup=get_dates_keyboard()
    )
    await state.set_state(OrderStates.checkout_date)

@router.callback_query(F.data.startswith("date_"))
async def process_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_date = callback.data.split("_")[1]
    await state.update_data(delivery_date=delivery_date)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    await state.update_data(delivery_time="16:00-18:00")
    
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç–∞:",
        reply_markup=get_payment_method_keyboard()
    )
    await state.set_state(OrderStates.checkout_payment)

@router.callback_query(F.data.startswith("payment_"))
async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    if "disabled" in callback.data:
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    payment_method = "cash" if "cash" in callback.data else "card"
    await state.update_data(payment_method=payment_method)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    await state.update_data(notes="")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await show_order_confirmation(callback, state)

@router.callback_query(F.data == "edit_checkout")
async def edit_checkout(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    await start_checkout(callback, state)

@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_main_menu()
    )

async def show_order_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    order_data = await state.get_data()
    
    if session:
        user = await UserRepository.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        cart_items = await CartRepository.get_cart_items(session, user.id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        total_amount = sum(item.product.price * item.quantity for item in cart_items)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        order_text = (
            "üìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê\n\n"
            "üìç –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"   üöó –°–∞–º–æ–≤—ã–≤–æ–∑: {order_data['delivery_address']}\n"
            f"   üìÖ –î–∞—Ç–∞: {order_data['delivery_date']}\n"
            f"   ‚è∞ –í—Ä–µ–º—è: {order_data['delivery_time']}\n"
            f"   üí≥ –û–ø–ª–∞—Ç–∞: {'–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' if order_data['payment_method'] == 'cash' else '–ö–∞—Ä—Ç–∞'}\n\n"
        )
        
        order_text += "üõí –°–û–°–¢–ê–í –ó–ê–ö–ê–ó–ê:\n"
        for item in cart_items:
            item_total = item.product.price * item.quantity
            order_text += f"   ‚Ä¢ {item.product.name}\n"
            order_text += f"     {item.quantity} —à—Ç. √ó {item.product.price}‚ÇΩ = {item_total}‚ÇΩ\n"
        
        order_text += f"\nüíµ –ò–¢–û–ì–û: {total_amount}‚ÇΩ"
        
        await callback.message.edit_text(
            order_text,
            reply_markup=get_checkout_confirm_keyboard()
        )
    else:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        order_text = (
            "üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
            f"üöó –°–∞–º–æ–≤—ã–≤–æ–∑: {order_data['delivery_address']}\n"
            f"üìÖ –î–∞—Ç–∞: {order_data['delivery_date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {order_data['delivery_time']}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {'–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' if order_data['payment_method'] == 'cash' else '–ö–∞—Ä—Ç–∞'}\n\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É"
        )
        
        await callback.message.edit_text(
            order_text,
            reply_markup=get_checkout_confirm_keyboard()
        )

async def send_admin_notification(bot: Bot, order: Order, user: User, order_items_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    admin_message = (
        "üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
        f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name or ''} {user.last_name or ''} (@{user.username or '–±–µ–∑ username'})\n"
        f"üìû Telegram ID: {user.telegram_id}\n"
        f"üíµ –°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
        f"üìç –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {order.delivery_address}\n"
        f"üìÖ –î–∞—Ç–∞: {order.delivery_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order.delivery_time}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {'–ù–∞–ª–∏—á–Ω—ã–µ' if order.payment_method == 'cash' else '–ö–∞—Ä—Ç–∞'}\n\n"
        f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{order_items_text}\n\n"
        "‚ö° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º"
    )
    
    try:
        await bot.send_message(chat_id=config.ADMIN_ID, text=admin_message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        order_data = await state.get_data()
        
        user = await UserRepository.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º cart_items —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        stmt = select(CartItem).options(
            selectinload(CartItem.product)
        ).where(CartItem.user_id == user.id)
        
        result = await session.execute(stmt)
        cart_items = result.scalars().all()
        
        if not cart_items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        total_amount = sum(item.product.price * item.quantity for item in cart_items)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–ë–ï–ó updated_at)
        order = Order(
            user_id=user.id,
            total_amount=total_amount,
            customer_name=order_data['customer_name'],
            delivery_method=order_data['delivery_method'],
            delivery_address=order_data['delivery_address'],
            delivery_date=order_data['delivery_date'],
            delivery_time=order_data['delivery_time'],
            payment_method=order_data['payment_method'],
            notes=order_data.get('notes', ''),
            status='pending'
        )
        session.add(order)
        await session.flush()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º flush –≤–º–µ—Å—Ç–æ commit —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        order_items_text = ""
        for cart_item in cart_items:
            item_total = cart_item.product.price * cart_item.quantity
            order_items_text += f"   ‚Ä¢ {cart_item.product.name}\n"
            order_items_text += f"     {cart_item.quantity} —à—Ç. √ó {cart_item.product.price}‚ÇΩ = {item_total}‚ÇΩ\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            order_item = OrderItem(
                order_id=order.id,
                product_id=cart_item.product.id,
                product_name=cart_item.product.name,
                product_price=cart_item.product.price,
                quantity=cart_item.quantity
            )
            session.add(order_item)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            product = await session.get(Product, cart_item.product.id)
            if product:
                product.quantity = max(0, product.quantity - cart_item.quantity)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        for cart_item in cart_items:
            await session.delete(cart_item)
        
        await session.commit()  # –û–¥–∏–Ω –∫–æ–º–º–∏—Ç –≤ –∫–æ–Ω—Ü–µ
        
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_admin_notification(bot, order, user, order_items_text)
        
        await callback.message.edit_text(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üì¶ –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: #{order.id}\n"
            f"üìç –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {order_data['delivery_address']}\n"
            f"üìÖ –î–∞—Ç–∞: {order_data['delivery_date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {order_data['delivery_time']}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {'–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' if order_data['payment_method'] == 'cash' else '–ö–∞—Ä—Ç–∞'}\n\n"
            "üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "checkout_delivery")
async def back_to_delivery(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await start_checkout(callback, state)

@router.callback_query(F.data == "checkout_payment")
async def back_to_payment(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã"""
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_method_keyboard()
    )
    await state.set_state(OrderStates.checkout_payment)