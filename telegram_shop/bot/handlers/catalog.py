from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from database.models import Category, Brand, Product
from utils.states import OrderStates
from bot.keyboards.catalog import (
    get_categories_keyboard, get_brands_keyboard, 
    get_products_keyboard, get_product_detail_keyboard
)
from bot.keyboards.main_menu import get_main_menu
from utils.helpers import get_product_status_text

router = Router()

@router.callback_query(F.data == "catalog")
async def show_categories(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await session.scalars(
        select(Category).where(Category.is_active == True)
    )
    categories = result.all()
    
    if not categories:
        await callback.message.edit_text(
            "üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            reply_markup=get_main_menu()
        )
        return
    
    await callback.message.edit_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_keyboard(categories)
    )
    await state.set_state(OrderStates.catalog)

@router.callback_query(F.data.startswith("category_"))
async def show_brands(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await session.scalars(
        select(Brand)
        .join(Brand.products)
        .where(Product.category_id == category_id)
        .where(Brand.is_active == True)
        .distinct()
    )
    brands = result.all()
    
    if not brands:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=get_brands_keyboard(brands, f"category_{category_id}")
    )
    await state.set_state(OrderStates.liquid_brands)

@router.callback_query(F.data.startswith("brand_"))
async def show_products(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞"""
    brand_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞
    result = await session.scalars(
        select(Product)
        .where(Product.brand_id == brand_id)
        .where(Product.is_active == True)
        .order_by(Product.name)
    )
    products = result.all()
    
    if not products:
        await callback.answer("–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_products_keyboard(products, f"brand_{brand_id}")
    )
    await state.set_state(OrderStates.liquid_products)

@router.callback_query(F.data.startswith("product_"))
async def show_product_detail(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[1])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager loading —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å lazy loading
    stmt = select(Product).options(
        selectinload(Product.brand),
        selectinload(Product.category)
    ).where(Product.id == product_id)
    
    result = await session.execute(stmt)
    product = result.scalar_one_or_none()
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = await get_product_status_text(product)
    
    product_text = (
        f"üõçÔ∏è {product.name}\n"
        f"üè∑Ô∏è {product.brand.name}\n"
        f"üìÅ {product.category.name}\n\n"
        f"{product.description}\n\n"
        f"üíµ –¶–µ–Ω–∞: {product.price}‚ÇΩ\n"
        f"üì¶ {status_text}"
    )
    
    await callback.message.edit_text(
        product_text,
        reply_markup=get_product_detail_keyboard(product_id, f"brand_{product.brand.id}")
    )

@router.callback_query(F.data == "back_to_products")
async def back_to_products(callback: CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    await show_categories(callback, session, None)

@router.callback_query(F.data == "back_to_brands")
async def back_to_brands(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥–æ–≤"""
    await show_categories(callback, session, state)

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥"""
    await show_categories(callback, session, state)