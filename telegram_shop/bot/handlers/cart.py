from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload

from database.models import CartItem
from database.repository import CartRepository, UserRepository
from bot.keyboards.cart import get_cart_keyboard
from bot.keyboards.main_menu import get_main_menu
from utils.helpers import check_product_availability

router = Router()

@router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user = await UserRepository.get_or_create_user(
        session=session,
        telegram_id=callback.from_user.id
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager loading –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    stmt = select(CartItem).options(
        selectinload(CartItem.product)
    ).where(CartItem.user_id == user.id)
    
    result = await session.execute(stmt)
    cart_items = result.scalars().all()
    
    if not cart_items:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=get_main_menu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for item in cart_items:
        item_total = item.product.price * item.quantity
        total += item_total
        status_icon = "‚úÖ" if item.product.quantity >= item.quantity else "‚ö†Ô∏è"
        cart_text += f"{status_icon} {item.product.name}\n"
        cart_text += f"   {item.quantity} —à—Ç. x {item.product.price}‚ÇΩ = {item_total}‚ÇΩ\n\n"
    
    cart_text += f"üíµ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    await callback.message.edit_text(
        cart_text,
        reply_markup=get_cart_keyboard(cart_items)
    )

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery, session: AsyncSession):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    is_available = await check_product_availability(session, product_id)
    if not is_available:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    user = await UserRepository.get_or_create_user(
        session=session,
        telegram_id=callback.from_user.id
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    await CartRepository.add_to_cart(session, user.id, product_id)
    
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@router.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: CallbackQuery, session: AsyncSession):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_item_id = int(callback.data.split("_")[1])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_item = await session.get(CartItem, cart_item_id)
    if cart_item:
        cart_item.quantity += 1
        await session.commit()
        await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
    await show_cart(callback, session)

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: CallbackQuery, session: AsyncSession):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_item_id = int(callback.data.split("_")[1])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_item = await session.get(CartItem, cart_item_id)
    if cart_item:
        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            await session.commit()
            await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∏—Ç—å –º–µ–Ω—å—à–µ 1", show_alert=True)
    await show_cart(callback, session)

@router.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_item_id = int(callback.data.split("_")[1])
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await session.execute(delete(CartItem).where(CartItem.id == cart_item_id))
    await session.commit()
    
    await callback.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await show_cart(callback, session)