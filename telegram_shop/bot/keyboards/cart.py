from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_cart_keyboard(cart_items):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    keyboard = []
    
    for item in cart_items:
        keyboard.extend([
            [
                InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{item.id}"),
                InlineKeyboardButton(text=f"{item.product.name} ({item.quantity} —à—Ç.)", callback_data=f"item_{item.id}"),
                InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{item.id}")
            ],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{item.id}")]
        ])
    
    if cart_items:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    keyboard.append([InlineKeyboardButton(text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_checkout_confirm_keyboard():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_checkout")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
        [InlineKeyboardButton(text="üîô –í –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_delivery_method_keyboard():
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ - —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑"""
    keyboard = [
        [InlineKeyboardButton(text="üè¢ 3-–µ –æ–±—â–µ–∂–∏—Ç–∏–µ –í–ì–¢–£", callback_data="pickup_vgtu")],
        [InlineKeyboardButton(text="üè† —É–ª.–¢–µ—Ä–µ—à–∫–æ–≤–æ–π 16–∫1", callback_data="pickup_tereshkovoy")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checkout")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_payment_method_keyboard():
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –Ω–∞–ª–∏—á–Ω—ã–µ –∏ –∫–∞—Ä—Ç–∞ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"""
    keyboard = [
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="payment_cash")],
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞ (—Å–∫–æ—Ä–æ)", callback_data="payment_card_disabled")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checkout_delivery")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_dates_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)"""
    from datetime import datetime, timedelta
    
    keyboard = []
    today = datetime.now()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ
    for i in range(7):
        current_date = today + timedelta(days=i)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–±–±–æ—Ç—É (5) –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6)
        if current_date.weekday() not in [5, 6]:
            date_str = current_date.strftime("%d.%m.%Y")
            weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][current_date.weekday()]
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{weekday} {date_str}",
                    callback_data=f"date_{date_str}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checkout_payment")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_back_to_checkout_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data="checkout")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)